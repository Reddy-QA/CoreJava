The Process by which one class acquire the properties or functionalities of another class is called Inheritance
The existing class is called as sub class or child class
The new class is called as the Parent class or the Super class
Different types of Inheritance are

1.Single Inheritance
2.Hierarchial Inheritance
3.Hybrid Inheritance
4.Multi-Level Inheritance


1.Single Inheritance
package InheritanceDemo;

public class ParentDemo {
	
	public ParentDemo()
	{
		System.out.println("Parent Class Constructor");
	}
	
	public int i=20;
	public static int j=30;
	
	public void m1()
	{
		System.out.println("Parent class Instance method");
	}

}
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
package InheritanceDemo;

public class ChildDemo extends ParentDemo {
	
	public ChildDemo()
	{
		System.out.println("Child class Constructor");
	}
	
	public int k=40;
	public static int l=50;
	
	public void m2()
	{
		System.out.println("child class Instance Method");
	}
	
	public static void main(String[] args) {
		
		ChildDemo cd=new ChildDemo();
		System.out.println(cd.i);
		System.out.println(j);
		System.out.println(cd.k);
		System.out.println(l);
		cd.m1();
		cd.m2();
	}

}
===============================================================================================================================================================================================================
2.Multi-Level Inheritance

package InheritanceDemo;

public class MultiA {
	
	public void methodA()
	{
		System.out.println("MultiA class Instance Method");
	}

}

package InheritanceDemo;

public class MultiB extends MultiA {
	
	public void methodB()
	{
		System.out.println("MultiB class Instance method");
	}

}

package InheritanceDemo;

public class MultiC extends MultiB {
	
	public void methodC()
	{
		System.out.println("MultiC class instance method");
	}
	
	public static void main(String[] args) {
		MultiC bb=new MultiC();
		bb.methodA();
		bb.methodB();
		bb.methodC();
	}

}
